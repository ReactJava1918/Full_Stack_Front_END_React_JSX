{"ast":null,"code":"// apiRequest.js\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:8080\"; // Function to set JWT token in Axios headers and sessionStorage\n\nconst setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    sessionStorage.setItem(\"jwtToken\", token);\n  } else {\n    delete axios.defaults.headers.common[\"Authorization\"];\n    sessionStorage.removeItem(\"jwtToken\");\n  }\n}; // Function to get JWT token from sessionStorage\n\n\nconst getAuthToken = () => {\n  return sessionStorage.getItem(\"jwtToken\");\n}; // Register a new user\n\n\nconst registerUser = async formData => {\n  console.log(\"hellooooooooooooooooooooooooooooooooooooooooooooooo\");\n\n  try {\n    console.log(\"cntrl in reg user \");\n    const response = await axios.post(`${API_URL}/auth/register-user`, formData);\n    console.log(\"cntrl in after hitting api \");\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Registration failed\");\n  }\n}; // Log in a user\n\n\nconst loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\n    console.log(\"===========================\" + JSON.stringify(response.data));\n    const {\n      token\n    } = response.data;\n    console.log(\"Token:-----------------------------\" + token);\n    setAuthToken(token); // Set JWT token\n\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Login failed\");\n  }\n}; // Get user data by user ID\n\n\nconst getUser = async userId => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.get(`${API_URL}/user/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Failed to get user data\");\n  }\n}; // Update user data by user ID\n\n\nconst updateUser = async (userId, userData) => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.put(`${API_URL}/user/${userId}`, userData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Failed to update user\");\n  }\n}; // Delete a user by user ID\n\n\nconst deleteUser = async userId => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.delete(`${API_URL}/user/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Failed to delete user\");\n  }\n}; // Get all users\n\n\nconst getAllUsers = async () => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.get(`${API_URL}/users`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Failed to get all users\");\n  }\n};\n\nexport { registerUser, loginUser, getUser, updateUser, deleteUser, getAllUsers, setAuthToken };","map":{"version":3,"names":["axios","API_URL","setAuthToken","token","defaults","headers","common","sessionStorage","setItem","removeItem","getAuthToken","getItem","registerUser","formData","console","log","response","post","data","error","Error","loginUser","credentials","JSON","stringify","getUser","userId","get","Authorization","updateUser","userData","put","deleteUser","delete","getAllUsers"],"sources":["D:/Josh/fullstack-frontend-master/src/api/apiRequest.js"],"sourcesContent":["// apiRequest.js\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8080\";\r\n\r\n// Function to set JWT token in Axios headers and sessionStorage\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n    sessionStorage.setItem(\"jwtToken\", token);\r\n  } else {\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n    sessionStorage.removeItem(\"jwtToken\");\r\n  }\r\n};\r\n\r\n// Function to get JWT token from sessionStorage\r\nconst getAuthToken = () => {\r\n  return sessionStorage.getItem(\"jwtToken\");\r\n};\r\n\r\n// Register a new user\r\nconst registerUser = async (formData) => {\r\n    console.log(\"hellooooooooooooooooooooooooooooooooooooooooooooooo\");\r\n  try {\r\n    console.log(\"cntrl in reg user \");\r\n    const response = await axios.post(`${API_URL}/auth/register-user`, formData);\r\n    console.log(\"cntrl in after hitting api \");\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Registration failed\");\r\n  }\r\n};\r\n\r\n// Log in a user\r\nconst loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\r\n    console.log(\"===========================\"+JSON.stringify(response.data));\r\n    const { token } = response.data;\r\n    console.log(\"Token:-----------------------------\"+token);\r\n    setAuthToken(token); // Set JWT token\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Login failed\");\r\n  }\r\n};\r\n\r\n// Get user data by user ID\r\nconst getUser = async (userId) => {\r\n  try {\r\n    const token = getAuthToken();\r\n    const response = await axios.get(`${API_URL}/user/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to get user data\");\r\n  }\r\n};\r\n\r\n// Update user data by user ID\r\nconst updateUser = async (userId, userData) => {\r\n  try {\r\n    const token = getAuthToken();\r\n    const response = await axios.put(`${API_URL}/user/${userId}`, userData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to update user\");\r\n  }\r\n};\r\n\r\n// Delete a user by user ID\r\nconst deleteUser = async (userId) => {\r\n  try {\r\n    const token = getAuthToken();\r\n    const response = await axios.delete(`${API_URL}/user/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to delete user\");\r\n  }\r\n};\r\n\r\n// Get all users\r\nconst getAllUsers = async () => {\r\n  try {\r\n    const token = getAuthToken();\r\n    const response = await axios.get(`${API_URL}/users`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to get all users\");\r\n  }\r\n};\r\n\r\nexport { registerUser, loginUser, getUser, updateUser, deleteUser, getAllUsers, setAuthToken };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}