{"ast":null,"code":"// apiRequest.js\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:8080\"; // Function to set JWT token in Axios headers and sessionStorage\n\nconst setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    sessionStorage.setItem(\"jwtToken\", token);\n  } else {\n    delete axios.defaults.headers.common[\"Authorization\"];\n    sessionStorage.removeItem(\"jwtToken\");\n  }\n}; // Function to get JWT token from sessionStorage\n\n\nconst getAuthToken = () => {\n  return sessionStorage.getItem(\"jwtToken\");\n};\n\nconst getRegUserdata = () => {\n  console.log(\"Before data loading from session\");\n  const regUserData = sessionStorage.getItem(\"regUserData\");\n  console.log(\"After data loading from session\");\n  return regUserData;\n}; // Register a new user\n\n\nconst registerUser = async formData => {\n  console.log(\"hellooooooooooooooooooooooooooooooooooooooooooooooo\");\n\n  try {\n    console.log(\"cntrl in reg user \");\n    const response = await axios.post(`${API_URL}/auth/register-user`, formData);\n    console.log(\"cntrl in after hitting api \");\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Registration failed\");\n  }\n}; // Log in a user\n\n\nconst loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\n    sessionStorage.setItem(\"regUserData\", JSON.stringify(response.data));\n    const {\n      token\n    } = response.data;\n    console.log(\"Token:-----------------------------\" + token);\n    setAuthToken(token); // Set JWT token\n\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Login failed\");\n  }\n}; // Get user data by user ID\n\n\nconst getUser = async () => {\n  try {\n    console.log(\"-----------------Before Token--------------\");\n    const token = getAuthToken();\n    console.log(\"-----------------After Token--------------\");\n    const regUserData = JSON.parse(getRegUserdata()); // Parse the JSON string from sessionStorage\n\n    console.log(\"-----------------After Data taken --------------\");\n    console.log(\"data loaded from server--------------\" + regUserData);\n    const response = await axios.get(`${API_URL}/user/${regUserData.id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Failed to get user data\");\n  }\n}; // Update user data by user ID\n\n\nconst updateUser = async (userId, userData) => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.put(`${API_URL}/user/${userId}`, userData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Failed to update user\");\n  }\n}; // Delete a user by user ID\n\n\nconst deleteUser = async userId => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.delete(`${API_URL}/user/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Failed to delete user\");\n  }\n}; // Get all users\n\n\nconst getAllUsers = async () => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.get(`${API_URL}/users`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Failed to get all users\");\n  }\n};\n\nexport { registerUser, loginUser, getUser, updateUser, deleteUser, getAllUsers, setAuthToken, getRegUserdata };","map":{"version":3,"names":["axios","API_URL","setAuthToken","token","defaults","headers","common","sessionStorage","setItem","removeItem","getAuthToken","getItem","getRegUserdata","console","log","regUserData","registerUser","formData","response","post","data","error","Error","loginUser","credentials","JSON","stringify","getUser","parse","get","id","Authorization","updateUser","userId","userData","put","deleteUser","delete","getAllUsers"],"sources":["D:/Josh/fullstack-frontend-master/src/api/apiRequest.js"],"sourcesContent":["// apiRequest.js\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8080\";\r\n\r\n// Function to set JWT token in Axios headers and sessionStorage\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n    sessionStorage.setItem(\"jwtToken\", token);\r\n  } else {\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n    sessionStorage.removeItem(\"jwtToken\");\r\n  }\r\n};\r\n\r\n// Function to get JWT token from sessionStorage\r\nconst getAuthToken = () => {\r\n  return sessionStorage.getItem(\"jwtToken\");\r\n};\r\n\r\nconst getRegUserdata=() =>\r\n{\r\nconsole.log(\"Before data loading from session\");\r\nconst  regUserData=sessionStorage.getItem(\"regUserData\");\r\nconsole.log(\"After data loading from session\");\r\nreturn regUserData\r\n};\r\n\r\n// Register a new user\r\nconst registerUser = async (formData) => {\r\n    console.log(\"hellooooooooooooooooooooooooooooooooooooooooooooooo\");\r\n  try {\r\n    console.log(\"cntrl in reg user \");\r\n    const response = await axios.post(`${API_URL}/auth/register-user`, formData);\r\n    console.log(\"cntrl in after hitting api \");\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Registration failed\");\r\n  }\r\n};\r\n\r\n// Log in a user\r\nconst loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\r\n    sessionStorage.setItem(\"regUserData\", JSON.stringify(response.data))\r\n    const { token } = response.data;\r\n    console.log(\"Token:-----------------------------\"+token);\r\n    setAuthToken(token); // Set JWT token\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Login failed\");\r\n  }\r\n};\r\n\r\n// Get user data by user ID\r\nconst getUser = async () => {\r\n  try {\r\n    console.log(\"-----------------Before Token--------------\");\r\n    const token = getAuthToken();\r\n    console.log(\"-----------------After Token--------------\");\r\n    const regUserData = JSON.parse(getRegUserdata()); // Parse the JSON string from sessionStorage\r\n    console.log(\"-----------------After Data taken --------------\");\r\n    console.log(\"data loaded from server--------------\"+regUserData);\r\n    const response = await axios.get(`${API_URL}/user/${regUserData.id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to get user data\");\r\n  }\r\n};\r\n\r\n\r\n// Update user data by user ID\r\nconst updateUser = async (userId, userData) => {\r\n  try {\r\n    const token = getAuthToken();\r\n    const response = await axios.put(`${API_URL}/user/${userId}`, userData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to update user\");\r\n  }\r\n};\r\n\r\n// Delete a user by user ID\r\nconst deleteUser = async (userId) => {\r\n  try {\r\n    const token = getAuthToken();\r\n    const response = await axios.delete(`${API_URL}/user/${userId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to delete user\");\r\n  }\r\n};\r\n\r\n// Get all users\r\nconst getAllUsers = async () => {\r\n  try {\r\n    const token = getAuthToken();\r\n    const response = await axios.get(`${API_URL}/users`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to get all users\");\r\n  }\r\n};\r\n\r\nexport { registerUser, loginUser, getUser, updateUser, deleteUser, getAllUsers, setAuthToken,getRegUserdata };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}